// HSL - Housing Script Language
// Copyright (C) 2025 The HSL Authors
//
// This file is part of HSL.
//
// HSL is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3
// as published by the Free Software Foundation.
//
// HSL is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// The float value that is closer than any other to **pi**, the ratio of the circumference of a circle to its diameter.
const PI = 3.141592653589793

// The float value that is closer than any other to **e**, the base of the natural logarithms.
const E = 2.718281828459045

// Compute the absolute value of a number value.
macro abs<T : number>(t: T) {
    if (t < 0) {
        return -t
    } else {
        return t
    }
}

// Compiute the smaller of two number values.
macro min<T : number>(a: T, b: T) {
    if (a < b) {
        return a
    } else {
        return b
    }
}

// Compute the greater of two number values.
macro max<T : number>(a: T, b: T) {
    if (a > b) {
        return a
    } else {
        return b
    }
}

// Compute the trigonometric sine of an angle.
//
// * `x` - an angle, in radians
macro sin(x: float) -> float

// Compute the trigonometric cosine of an angle.
//
// * `x` - n angle, in radians
macro cos(x: float) -> float

// Compute the correctly rounded positive square root of a float value.
macro sqrt(x: float) -> float

// Compute the smallest (closest to negative infinity) float value that is greater than or equal to the 
// argument and is equal to a mathematical integer.
macro ceil(x: float) -> float

// Compute the largest (closest to positive infinity) float value that is less than or equal to the 
// argument and is equal to a mathematical integer.
macro floor(x: float) -> float

// Compute the value of the first argument raised to the power of the second argument.
//
// * `base` - the base number
// * `exponent` - the value to raise the base to
macro pow(base: float, exponent: float) -> float

// Compute the closest int to the argument, with ties rounding to positive infinity.
//
// * `x` - a floating-point value to be rounded to an integer
macro round(x: float) -> int

// Convert an angle measured in degrees to an approximately equivalent angle measured in radians. 
// The conversion from degrees to radians is generally inexact.
//
// * `deg` - an angle, in degrees
macro rad(deg: float) -> float

// Convert an angle measured in radians to an approximately equivalent angle measured in degrees.
// The conversion from radians to degrees is generally inexact; users should
// **not** expect `cos(rad(90.0))` to exactly equal `0.0`0.0.
//
// * `rad` - an angle, in radians
macro deg(rad: float) -> float
